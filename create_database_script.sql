-- DROP EXISTING DATABASE
DROP TABLE IF EXISTS ListenerUserID CASCADE;
DROP TABLE IF EXISTS ListenerEmail CASCADE;
DROP TABLE IF EXISTS ArtistUserID CASCADE;
DROP TABLE IF EXISTS ArtistEmail CASCADE;
DROP TABLE IF EXISTS ArtistName CASCADE;
DROP TABLE IF EXISTS CreatePlaylist CASCADE;
DROP TABLE IF EXISTS Album CASCADE;
DROP TABLE IF EXISTS Create1 CASCADE;
DROP TABLE IF EXISTS ContainSong CASCADE;
DROP TABLE IF EXISTS Include CASCADE;
DROP TABLE IF EXISTS Genre CASCADE;
DROP TABLE IF EXISTS Have CASCADE;
DROP TABLE IF EXISTS Label CASCADE;
DROP TABLE IF EXISTS Under CASCADE;
DROP TABLE IF EXISTS IsParentOf CASCADE;

DROP DATABASE IF EXISTS streamline_db;

DROP OWNED BY sl_admin;
DROP USER IF EXISTS sl_admin;



-- CREATE USER TO BE USED IN DJANGO
CREATE USER sl_admin WITH password '12345';
--ALTER ROLE sl_admin CREATEDB;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO sl_admin;
-- CREATE DATABASE
CREATE DATABASE streamline_db;


-- CREATE TABLES
CREATE TABLE ListenerUserID (
UserID INT PRIMARY KEY,
Email VARCHAR(255) NOT NULL,
FirstName VARCHAR(255),
LastName VARCHAR(255),
Age INT,
UNIQUE(Email)
);

CREATE TABLE ListenerEmail (
Email VARCHAR(255) PRIMARY KEY,
Password VARCHAR(255),
FOREIGN KEY (Email) REFERENCES ListenerUserID (Email)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE ArtistUserID (
UserID INT PRIMARY KEY,
Email VARCHAR(255) NOT NULL,
StageName VARCHAR(255) NOT NULL,
UNIQUE(Email),
UNIQUE(StageName)
);

CREATE TABLE ArtistEmail(
Email VARCHAR(255) PRIMARY KEY,
Password VARCHAR(255),
FOREIGN KEY (Email) REFERENCES ArtistUserID (Email)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE ArtistName(
StageName VARCHAR(255) PRIMARY KEY,
FirstName VARCHAR(255),
LastName VARCHAR(255),
FOREIGN KEY (StageName) REFERENCES ArtistUserID (StageName)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE CreatePlaylist (
UserID INT,
PlaylistName VARCHAR(255),
PRIMARY KEY(UserID, PlaylistName),
FOREIGN KEY (UserID) REFERENCES ListenerUserID (UserID)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE Album (
AlbumID INT PRIMARY KEY,
AlbumArt VARCHAR(255),
AlbumName VARCHAR(255)
);

CREATE TABLE Create1 (
AlbumID INT,
UserID INT,
CreationDate DATE,
PRIMARY KEY(AlbumID, UserID),
FOREIGN KEY (AlbumID) REFERENCES Album (AlbumID)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY (UserID) REFERENCES ArtistUserID(UserID)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE ContainSong(
AlbumID INT,
SongName VARCHAR(255),
TrackLength TIME,
PRIMARY KEY (AlbumID, SongName),
FOREIGN KEY (AlbumID) REFERENCES Album (AlbumID)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE Include(
AlbumID INT,
SongName VARCHAR(255),
UserID INT,
PlaylistName VARCHAR(255),
PRIMARY KEY(AlbumID,SongName,UserID,PlaylistName),
FOREIGN KEY (AlbumID,SongName) REFERENCES ContainSong (AlbumID, SongName)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY (UserID,PlaylistName) REFERENCES CreatePlaylist (UserID,PlaylistName)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE Genre(
GenreName VARCHAR(255) PRIMARY KEY
);

CREATE TABLE Have(
AlbumID INT,
SongName VARCHAR(255),
GenreName VARCHAR(255),
PRIMARY KEY(AlbumID, SongName, GenreName),
FOREIGN KEY (AlbumID,SongName) REFERENCES ContainSong (AlbumID,SongName)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY(GenreName) REFERENCES Genre (GenreName)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE Label(
LabelName VARCHAR(255) PRIMARY KEY
);

CREATE TABLE Under(
UserID INT,
AlbumID INT,
LabelName VARCHAR(255),
PRIMARY KEY (UserID, AlbumID, LabelName),
FOREIGN KEY (UserID) REFERENCES ArtistUserID (UserID)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY (AlbumID) REFERENCES Album (AlbumID)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY (LabelName) REFERENCES Label (LabelName)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE IsParentOf(
ParentLabelName VARCHAR(255),
SubLabelName VARCHAR(255),
PRIMARY KEY (ParentLabelName, SubLabelName),
FOREIGN KEY (ParentLabelName) REFERENCES Label (LabelName)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY (SubLabelName) REFERENCES Label (LabelName)
ON DELETE CASCADE
ON UPDATE CASCADE
);

-- INSERT VALUES
INSERT INTO ListenerUserID (UserID,Email,FirstName,LastName,Age)
VALUES
(6, 'dog@dog.com', 'John', 'Doe', 23),
(7,	'mouse@mouse.com', 'Mary', 'Jane', 15),
(8,	'lion@lion.com', 'Simon', 'Smith', 7),
(9, 'cat@cat.com', 'Neko', 'Kawaii', 14),
(10, 'jesus@holywater.com',	'Jesus', 'Christ',2018)
;

INSERT INTO ListenerEmail (Email, Password)
VALUES
('dog@dog.com', '12345'),
('mouse@mouse.com', 'iluvyou'),
('lion@lion.com', '11111'),
('cat@cat.com', '12345'),
('jesus@holywater.com', 'qwerty')
;